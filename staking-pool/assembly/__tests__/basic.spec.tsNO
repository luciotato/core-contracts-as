import { u128, VMContext, Context, env, util } from "near-sdk-as";
import * as Contract from ".."
import { getCreatedStatePointer } from "../contract-internal";
import { RewardFeeFraction } from "../model";

type Balance = u128

//global test vars
let last_total_staked_balance: Balance
let last_total_stake_shares: Balance

//utility functions
function ntoy(nearAmount: number): u128 {
  return u128.from<number>(nearAmount * 1e24)
}

function yton(yoctoAmount: u128): u128 {
  return yoctoAmount / u128.from<number>(1e24)
}

function prepareForTest(
  owner: string, 
  stake_public_key: string,
  reward_fee_fraction: RewardFeeFraction): void {

  VMContext.setCurrent_account_id(owner)
  VMContext.setAccount_balance(ntoy(30))

  //UNCOMMENTING Contract.create MAKES AS-PECT fail with a Linker Error
  //most contract functions call restake() which in turn uses Promises
  //i think AS-PECT doesn't support promises
  //Contract.create(owner,stake_public_key,reward_fee_fraction)

  last_total_staked_balance = Contract.get_total_staked_balance()
  // total_stake_shares is not exposed thru a public function
  last_total_stake_shares = getCreatedStatePointer().total_stake_shares
}

function verify_stake_price_increase_guarantee(): void {
  //let total_staked_balance = Contract.get_total_staked_balance()
  // total_stake_shares is not exposed thru a public function
  //let total_stake_shares = getCreatedStatePointer().total_stake_shares

  //assert(total_staked_balance * last_total_stake_shares >= last_total_staked_balance * total_stake_shares,
  //  "Price increase guarantee was violated.")
}

const INPUT = "USER123";
const DEPOSIT = u128.from(10);

beforeEach(() => {
  VMContext.setAttached_deposit(DEPOSIT);
  //VMContext.setInput(INPUT);
  prepareForTest(
    "stakingcontract.account",
    "KuTCtARNzxZQ3YvXDeLjx83FDqxv2SdQTSbiq876zR7",
    new RewardFeeFraction(0, 0))
});

describe("Function call", () => {
  it("should contain input", () => {
    env.input(0);
    let len = env.register_len(0);
    let expected = new Uint8Array(len as u32);
    // @ts-ignore;
    env.read_register(0, expected.dataStart);
    expect(expected).toStrictEqual(util.stringToBytes(INPUT))
  });

  it("should have correct deposit", () => {
    expect(Context.attachedDeposit).toStrictEqual(DEPOSIT);
  });



});